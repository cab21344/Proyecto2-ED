#include <EEPROM.h>
#include <LiquidCrystal.h>
#include <avr/io.h>
#include <avr/interrupt.h>
#include <util/delay.h>
#include <Servo.h>

const int rs = 8, en = 7, d4 = 5, d5 = 4, d6 = 3, d7 = 2;
LiquidCrystal lcd(rs, en, d4, d5, d6, d7);

//se definen los puertos y pines en donde están conectados los ervos
#define pinservo1 11
#define pinservo2 10
#define pinservo3 9
#define pinservo4 6

//se definen los servos como servos
Servo servo1;
Servo servo2;
Servo servo3;
Servo servo4;

//se definen los puertos y pines donde estan los botones
#define boton1 PC0 //vertical
#define boton2 PC1 //horizontal
#define boton3 PC2 //mojar pincel
#define boton4 PC3 //abrir pinza
#define boton5 PC4 //interrupcion

int angle0 = 0;
int angle300 = 15;
int angle30 = 30;
int angle90 = 90;
int angle110 = 110;
int angle180 = 180;
int angle270 = 270;

//se define donde se van a almacenar los angulos en la EEPROM
int add_angle0 = 0;
int add_angle30 = 1;
int add_angle90 = 2;
int add_angle110 = 3;
int add_angle180 = 4;
int add_angle270 = 5;
int add_angle300 = 6;

//interrupciones
volatile bool interruptFlag1 = false;
volatile bool interruptFlag2 = false;
volatile bool interruptFlag3 = false;
volatile bool interruptFlag4 = false;
volatile bool interruptFlag5 = false;

void setup()
{
  DDRB |= (1 << pinservo1) | (1 << pinservo2) | (1 << pinservo3); //configura los pines de servos PortB como salida
  DDRD |= (1 << pinservo4); //configura pines de los servos PortD como salidas

  DDRC &= ~((1 << boton1) | (1 << boton2) | (1 << boton3) | (1 << boton4) | (1 << boton5)); //configura pines de botones como entradas
  PORTC |= (1 << boton1) | (1 << boton2) | (1 << boton3) | (1 << boton4) | (1 << boton5); //activar resistencias pull-up para botones

  PCICR |= (1 << PCIE1); //habilitar interrupciones
  PCMSK1 |= (1 << PCINT8) | (1 << PCINT9) | (1 << PCINT10) | (1 << PCINT11) | (1 << PCINT12); //habilitar interrupciones
  
  //union de servos con su pin
  servo1.attach(pinservo1);
  servo2.attach(pinservo2);
  servo3.attach(pinservo3);
  servo4.attach(pinservo4);

  ICR1 = 20000; //configurar periodo del PWM (50Hz aproximadamente)
  OCR1A = 2000; //configurar ancho de pulso del PWM (40% aproximadamente)

  lcd.begin(20, 4); //inicio de la pantalla LCD
  lcd.print("Brazo robotico");
  delay(500);

//almacenar los ángulos en la EEPROM
  EEPROM.write(add_angle0, angle0);
  EEPROM.write(add_angle30, angle30);
  EEPROM.write(add_angle90, angle90);
  EEPROM.write(add_angle110, angle110);
  EEPROM.write(add_angle180, angle180);
  EEPROM.write(add_angle270, angle270);
  EEPROM.write(add_angle300, angle300);
}

void loop()
{
//lee los ángulos que se almacenaron en la EEPROM
  angle0 = EEPROM.read(add_angle0);
  angle30 = EEPROM.read(add_angle30);
  angle90 = EEPROM.read(add_angle90);
  angle110 = EEPROM.read(add_angle110);
  angle180 = EEPROM.read(add_angle180);
  angle270 = EEPROM.read(add_angle270);
  angle300 = EEPROM.read(add_angle300);

//menú principal
  lcd.setCursor(0, 0);
  lcd.print("1) vertical         ");
  lcd.setCursor(0, 1);
  lcd.print("2) horizontal       ");
  lcd.setCursor(0, 2);
  lcd.print("3) mojar pincel     ");
  lcd.setCursor(0, 3);
  lcd.print("4) pinza            ");
  delay(1000);

//se colocan los servos en posición inicial
  servo1.write(angle0);
  servo2.write(angle180);
  servo3.write(angle0);
  servo4.write(angle0);

if (interruptFlag1) //hace línea vertical
  {
    lcd.setCursor(0, 0);
    lcd.print("Vertical            ");
    lcd.setCursor(0, 1);
    lcd.print("                    ");
    lcd.setCursor(0, 2);
    lcd.print("                    ");
    lcd.setCursor(0, 3);
    lcd.print("                    ");

    servo2.write(angle110 + angle30);
    delay(500);
    //servo2.write(angle180);
    servo3.write(angle90 - angle30);

    interruptFlag1 = false;
  }
  else if (interruptFlag2) //hace línea horizontal
  {
    lcd.setCursor(0, 0);
    lcd.print("horizontal          ");
    lcd.setCursor(0, 1);
    lcd.print("                    ");
    lcd.setCursor(0, 2);
    lcd.print("                    ");
    lcd.setCursor(0, 3);
    lcd.print("                    ");

    servo2.write(angle110);
    servo3.write(angle0);
    delay(500);
    servo1.write(angle90);
    delay(500);

    interruptFlag2 = false;
  }
else if (interruptFlag3) //dip in the paint
  {
    lcd.setCursor(0, 0);
    lcd.print("Mojar pincel        ");
    lcd.setCursor(0, 1);
    lcd.print("                    ");
    lcd.setCursor(0, 2);
    lcd.print("                    ");
    lcd.setCursor(0, 3);
    lcd.print("                    ");

    servo1.write(angle110);
    delay(500);
    servo2.write(angle110);
    delay(500);
    servo2.write(angle180);
    delay(500);
    servo2.write(angle110);
    delay(500);
    servo2.write(angle180);
    
    delay(500);

    interruptFlag3 = false;
  }
else if (interruptFlag4) //abre pinza
  {
    lcd.setCursor(0, 0);
    lcd.print("Pinza abierta       ");
    lcd.setCursor(0, 1);
    lcd.print("                    ");
    lcd.setCursor(0, 2);
    lcd.print("                    ");
    lcd.setCursor(0, 3);
    lcd.print("                    ");

    servo4.write(angle180);
    delay(3000);
    servo4.write(angle0);

    interruptFlag4 = false;
  }
else if (interruptFlag5) //interrupcion para regresar a lo normal
  {
    servo4.write(angle30);
    servo1.write(angle0);
    servo2.write(angle180);
    servo3.write(angle0);

    interruptFlag5 = false;
  }
}

ISR(PCINT1_vect) //interrupciones
{
  if (!(PINC & (1 << boton1))) //interrupcion boton 1
  {
    interruptFlag1 = true;
  }
  else if (!(PINC & (1 << boton2))) //interrupcion boton 2
  {
    interruptFlag2 = true;
  }
  else if (!(PINC & (1 << boton3))) //interrupcion boton 3
  {
    interruptFlag3 = true;
  }
  else if (!(PINC & (1 << boton4))) //interrupcion boton 4
  {
    interruptFlag4 = true;
  }
  else if (!(PINC & (1 << boton5))) //interrupcion boton 5
  {
    interruptFlag5 = true;
  }
}
